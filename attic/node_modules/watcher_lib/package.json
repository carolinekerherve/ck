{
  "name": "watcher_lib",
  "description": "A library that can watch a directory and recompile files if they change. Can be used to build watcher applications such as less-watcher or coffee-watcher.",
  "keywords": [
    "less",
    "coffee",
    "reload",
    "watch",
    "recompile",
    "css"
  ],
  "author": {
    "name": "amix"
  },
  "version": "1.1.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "engines": {
    "node": ">=0.2.0"
  },
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/watcher_lib.js",
  "readme": "A library that can watch a directory and recompile files if they change. Can be used to build watcher scripts such as less-watcher or coffee-watcher.\n\nTo install watcher_lib via npm simply do:\n\n    sudo npm install watcher_lib\n\nTo see how it's used check following projects:\n\n* Automatically compile changed Less files https://amix.github.com/less-watcher/\n* Automatically compile changed Coffee files https://amix.github.com/coffee-watcher/\n\nSample usage (code from less-watcher):\n\n```coffeescript\n# Use `watcher-lib`, a library that abstracts away most of the implementation details.\n# This library also makes it possible to implement any watchers (see coffee-watcher for an example).\nwatcher_lib = require './watcher-lib/watcher-lib'\n\n\n# Searches through a directory structure for *.less files using `find`.\n# For each .less file it runs `compileIfNeeded` to compile the file if it's modified.\nfindLessFiles = (dir) ->\n    watcher_lib.findFiles('*.less', dir, compileIfNeeded)\n\n\n# Keeps a track of modified times for .less files in a in-memory object,\n# if a .less file is modified it recompiles it using compileLessScript.\n#\n# When starting the script all files will be recompiled.\nWATCHED_FILES = {}\ncompileIfNeeded = (file) ->\n    watcher_lib.compileIfNeeded(WATCHED_FILES, file, compileLessScript)\n\n\n# Compiles a file using `lessc`.\n#\n# Compilation errors are printed out to stdout.\ncompileLessScript = (file) ->\n    fnGetOutputFile = (file) -> file.replace(/([^\\/\\\\]+)\\.less/, '.less.$1.css')\n    watcher_lib.compileFile(\"lessc #{ file }\", file, fnGetOutputFile)\n\n\n# Starts a poller that polls each second in a directory that's\n# either by default the current working directory or a directory that's passed through process arguments.\nwatcher_lib.startDirectoryPoll(process.argv[0] or '.', findLessFiles)\n```\n",
  "readmeFilename": "README.markdown",
  "_id": "watcher_lib@1.1.0",
  "dist": {
    "shasum": "9e375d52d9fa295fe69fbb66e0c0c9fa50afb5d5"
  },
  "_from": "watcher_lib@",
  "_resolved": "https://registry.npmjs.org/watcher_lib/-/watcher_lib-1.1.0.tgz"
}
